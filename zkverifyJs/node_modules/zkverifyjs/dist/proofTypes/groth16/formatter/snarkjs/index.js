"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatPubs = exports.formatVk = exports.formatProof = void 0;
const utils_1 = require("../utils");
/**
 * Formats zk-SNARK proof data for Groth16.
 *
 * @param {ProofInput} proof - Raw proof data.
 * @param {ProofOptions} options - Proof options containing curve information.
 * @returns {Proof} - Formatted proof data.
 */
const formatProof = (proof, options) => {
    const proofData = (0, utils_1.unstringifyBigInts)(proof);
    const curve = (0, utils_1.extractCurve)(options.curve);
    const endianess = (0, utils_1.getEndianess)(curve);
    return {
        curve,
        proof: {
            a: (0, utils_1.formatG1Point)(proofData.pi_a, endianess),
            b: (0, utils_1.formatG2Point)(proofData.pi_b, endianess, curve),
            c: (0, utils_1.formatG1Point)(proofData.pi_c, endianess),
        },
    };
};
exports.formatProof = formatProof;
/**
 * Formats verification key for Groth16 zk-SNARK proof.
 *
 * @param {Groth16VerificationKeyInput} vk - Raw verification key data.
 * @param {ProofOptions} options - Proof options containing curve information.
 * @returns {Groth16VerificationKey} - Formatted verification key.
 */
const formatVk = (vk, options) => {
    const vkData = (0, utils_1.unstringifyBigInts)(vk);
    const curve = (0, utils_1.extractCurve)(options.curve);
    const endianess = (0, utils_1.getEndianess)(curve);
    return {
        curve,
        alpha_g1: (0, utils_1.formatG1Point)(vkData.vk_alpha_1, endianess),
        beta_g2: (0, utils_1.formatG2Point)(vkData.vk_beta_2, endianess, curve),
        gamma_g2: (0, utils_1.formatG2Point)(vkData.vk_gamma_2, endianess, curve),
        delta_g2: (0, utils_1.formatG2Point)(vkData.vk_delta_2, endianess, curve),
        gamma_abc_g1: vkData.IC.map((x) => (0, utils_1.formatG1Point)(x, endianess)),
    };
};
exports.formatVk = formatVk;
/**
 * Formats an array of public signals.
 *
 * @param {string[]} pubs - Array of public signals.
 * @returns {string[]} - Formatted public signals.
 */
const formatPubs = (pubs) => {
    return (0, utils_1.formatPublicSignals)(pubs);
};
exports.formatPubs = formatPubs;
//# sourceMappingURL=index.js.map