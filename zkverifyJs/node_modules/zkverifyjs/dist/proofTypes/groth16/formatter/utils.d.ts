import { CurveType } from '../../../config';
/**
 * Recursively converts numeric strings and hexadecimal strings in an object, array, or string
 * to `bigint`. Handles nested arrays and objects.
 */
export declare const unstringifyBigInts: (o: unknown) => unknown;
/**
 * Determines endianess based on the curve type.
 */
export declare const getEndianess: (curve: string) => "LE" | "BE";
/**
 * Extracts and normalizes curve type.
 */
export declare const extractCurve: (curve: CurveType) => string;
/**
 * Converts bigint to a hexadecimal string based on endianess.
 */
export declare const toHex: (value: bigint, length: number, endianess: "LE" | "BE") => string;
/**
 * Formats a G1 point based on endianess and curve type.
 */
export declare const formatG1Point: (point: string[], endianess: "LE" | "BE") => string;
/**
 * Formats a G2 point based on endianess and curve type.
 */
export declare const formatG2Point: (point: string[][], endianess: "LE" | "BE", curve: string) => string;
/**
 * Formats a scalar as little-endian hexadecimal string.
 */
export declare const formatScalar: (scalar: string) => string;
/**
 * Formats an array of public signals.
 *
 * @param {string[]} pubs - Array of public signals.
 * @returns {string[]} - Formatted public signals.
 */
export declare const formatPublicSignals: (pubs: string[]) => string[];
//# sourceMappingURL=utils.d.ts.map