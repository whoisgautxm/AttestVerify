"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkvRpc = exports.zkvTypes = exports.proofConfigurations = exports.CurveType = exports.Library = exports.ProofType = exports.SupportedNetwork = void 0;
const proofTypes_1 = require("../proofTypes");
var SupportedNetwork;
(function (SupportedNetwork) {
    SupportedNetwork["Testnet"] = "wss://testnet-rpc.zkverify.io";
    SupportedNetwork["Custom"] = "custom";
    // ADD_NEW_SUPPORTED_NETWORK
})(SupportedNetwork || (exports.SupportedNetwork = SupportedNetwork = {}));
var ProofType;
(function (ProofType) {
    ProofType["fflonk"] = "fflonk";
    ProofType["groth16"] = "groth16";
    ProofType["risc0"] = "risc0";
    ProofType["ultraplonk"] = "ultraplonk";
    ProofType["proofofsql"] = "proofofsql";
    // ADD_NEW_PROOF_TYPE
})(ProofType || (exports.ProofType = ProofType = {}));
var Library;
(function (Library) {
    Library["snarkjs"] = "snarkjs";
    Library["gnark"] = "gnark";
})(Library || (exports.Library = Library = {}));
var CurveType;
(function (CurveType) {
    CurveType["bn128"] = "bn128";
    CurveType["bn254"] = "bn254";
    CurveType["bls12381"] = "bls12381";
})(CurveType || (exports.CurveType = CurveType = {}));
exports.proofConfigurations = {
    [ProofType.fflonk]: {
        pallet: 'settlementFFlonkPallet',
        processor: proofTypes_1.FflonkProcessor,
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.groth16]: {
        pallet: 'settlementGroth16Pallet',
        processor: proofTypes_1.Groth16Processor,
        requiresLibrary: true,
        requiresCurve: true,
    },
    [ProofType.risc0]: {
        pallet: 'settlementRisc0Pallet',
        processor: proofTypes_1.Risc0Processor,
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.ultraplonk]: {
        pallet: 'settlementUltraplonkPallet',
        processor: proofTypes_1.UltraPlonkProcessor,
        requiresLibrary: false,
        requiresCurve: false,
    },
    [ProofType.proofofsql]: {
        pallet: 'settlementProofOfSqlPallet',
        processor: proofTypes_1.ProofOfSqlProcessor,
        requiresLibrary: false,
        requiresCurve: false,
    },
    // ADD_NEW_PROOF_TYPE
};
exports.zkvTypes = {
    MerkleProof: {
        root: 'H256',
        proof: 'Vec<H256>',
        number_of_leaves: 'u32',
        leaf_index: 'u32',
        leaf: 'H256',
    },
};
exports.zkvRpc = {
    poe: {
        proofPath: {
            description: 'Get the Merkle root and path of a stored proof',
            params: [
                {
                    name: 'attestation_id',
                    type: 'u64',
                },
                {
                    name: 'proof_hash',
                    type: 'H256',
                },
                {
                    name: 'at',
                    type: 'BlockHash',
                    isOptional: true,
                },
            ],
            type: 'MerkleProof',
        },
    },
};
//# sourceMappingURL=index.js.map