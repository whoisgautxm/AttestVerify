import { ProofOptions, VerifyOptions } from '../../types';
import { CurveType, Library, ProofType } from '../../../config';
import { EventEmitter } from 'events';
import { VKRegistrationTransactionInfo } from '../../../types';
export type RegisterKeyMethodMap = {
    [K in keyof typeof ProofType]: (library?: Library, curve?: CurveType) => RegisterKeyBuilder;
};
export declare class RegisterKeyBuilder {
    private readonly executeRegisterVerificationKey;
    private options;
    private nonceSet;
    constructor(executeRegisterVerificationKey: (options: VerifyOptions, verificationKey: unknown) => Promise<{
        events: EventEmitter;
        transactionResult: Promise<VKRegistrationTransactionInfo>;
    }>, proofOptions: ProofOptions);
    nonce(nonce: number): this;
    execute(verificationKey: unknown): Promise<{
        events: EventEmitter;
        transactionResult: Promise<VKRegistrationTransactionInfo>;
    }>;
}
//# sourceMappingURL=index.d.ts.map