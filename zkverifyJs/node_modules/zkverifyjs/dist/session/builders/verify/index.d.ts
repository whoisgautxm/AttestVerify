import { ProofOptions, VerifyOptions } from '../../types';
import { CurveType, Library, ProofType } from '../../../config';
import { EventEmitter } from 'events';
import { VerifyTransactionInfo } from '../../../types';
import { VerifyInput } from '../../../api/verify/types';
export type ProofMethodMap = {
    [K in keyof typeof ProofType]: (library?: Library, curve?: CurveType) => VerificationBuilder;
};
export declare class VerificationBuilder {
    private readonly executeVerify;
    private readonly options;
    private nonceSet;
    private waitForPublishedAttestationSet;
    private registeredVkSet;
    constructor(executeVerify: (options: VerifyOptions, input: VerifyInput) => Promise<{
        events: EventEmitter;
        transactionResult: Promise<VerifyTransactionInfo>;
    }>, proofOptions: ProofOptions);
    nonce(nonce: number): this;
    waitForPublishedAttestation(): this;
    withRegisteredVk(): this;
    execute(input: VerifyInput): Promise<{
        events: EventEmitter;
        transactionResult: Promise<VerifyTransactionInfo>;
    }>;
}
//# sourceMappingURL=index.d.ts.map