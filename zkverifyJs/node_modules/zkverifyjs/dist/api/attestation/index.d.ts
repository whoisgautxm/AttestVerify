import { ApiPromise } from '@polkadot/api';
import { EventEmitter } from 'events';
import { AttestationEvent } from '../../types';
/**
 * Subscribes to NewAttestation events on the chain and triggers the provided callback as they occur.
 * Optionally filters the events by attestationId.
 * If attestationId is specified, the subscription will automatically end after the event is received.
 *
 * @param {ApiPromise} api - The Polkadot.js API instance.
 * @param {Function} callback - The callback function to call with the event data when a NewAttestation event occurs.
 * @param {number} [attestationId] - Optional attestation ID to filter events by and subsequently unsubscribe.
 * @returns {EventEmitter} An EventEmitter that handles the subscription.
 */
export declare function subscribeToNewAttestations(api: ApiPromise, callback: (data: AttestationEvent) => void, attestationId?: number): EventEmitter;
/**
 * Unsubscribes from the current NewAttestation events subscription.
 * This stops any further events from being emitted.
 *
 * @param {EventEmitter} emitter - The EventEmitter to unsubscribe.
 */
export declare function unsubscribeFromNewAttestations(emitter: EventEmitter): void;
//# sourceMappingURL=index.d.ts.map