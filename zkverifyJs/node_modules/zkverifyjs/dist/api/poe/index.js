"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProofDetails = getProofDetails;
/**
 * Retrieves proof details for the given attestationId and leafDigest.
 *
 * @param {ApiPromise} api - The Polkadot.js API instance.
 * @param {number} attestationId - The attestation ID for which the proof path is to be retrieved.
 * @param {string} leafDigest - The leaf digest to be used in the proof path retrieval.
 * @param {string} [blockHash] - Optional block hash to retrieve the proof at a specific block.
 * @returns {Promise<MerkleProof>} An object containing the proof path details.
 */
async function getProofDetails(api, attestationId, leafDigest, blockHash) {
    try {
        let proofPath;
        if (blockHash) {
            // @ts-expect-error: Custom RPC method 'poe.proofPath' is not recognized by TypeScript's type system
            proofPath = await api.rpc.poe.proofPath(attestationId, leafDigest, blockHash);
        }
        else {
            // @ts-expect-error: Custom RPC method 'poe.proofPath' is not recognized by TypeScript's type system
            proofPath = await api.rpc.poe.proofPath(attestationId, leafDigest);
        }
        return {
            root: proofPath.root.toString(),
            proof: proofPath.proof.map((h) => h.toString()),
            numberOfLeaves: Number(proofPath.number_of_leaves),
            leafIndex: Number(proofPath.leaf_index),
            leaf: proofPath.leaf.toString(),
        };
    }
    catch (error) {
        if (error instanceof Error) {
            throw new Error(`Failed to retrieve proof details: ${error.message}`);
        }
        else {
            throw new Error('Failed to retrieve proof details: An unknown error occurred.');
        }
    }
}
//# sourceMappingURL=index.js.map