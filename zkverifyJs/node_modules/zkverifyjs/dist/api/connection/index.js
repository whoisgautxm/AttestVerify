"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.establishConnection = void 0;
const api_1 = require("@polkadot/api");
const config_1 = require("../../config");
const helpers_1 = require("../../utils/helpers");
const config_2 = require("../../config");
/**
 * Establishes a connection to the zkVerify blockchain by initializing the API and provider.
 *
 * @param {SupportedNetwork} host - The network host ('testnet', 'mainnet', or 'custom').
 * @param {string} [customWsUrl] - The custom WebSocket URL (only used if host is 'custom').
 * @returns {Promise<EstablishedConnection>} The initialized API and provider.
 * @throws Will throw an error if the connection fails or if the provided configuration is invalid.
 */
const establishConnection = async (host, customWsUrl) => {
    let websocketUrl;
    if (host === config_1.SupportedNetwork.Custom) {
        if (!customWsUrl) {
            throw new Error('Custom WebSocket URL must be provided when host is set to "custom".');
        }
        websocketUrl = customWsUrl;
    }
    else {
        if (customWsUrl) {
            throw new Error('Custom WebSocket URL provided. Please select "custom" as the host if you want to use a custom WebSocket endpoint.');
        }
        websocketUrl = host;
    }
    try {
        const provider = new api_1.WsProvider(websocketUrl);
        const api = await api_1.ApiPromise.create({
            provider,
            types: config_2.zkvTypes,
            rpc: config_2.zkvRpc,
        });
        await (0, helpers_1.waitForNodeToSync)(api);
        return { api, provider };
    }
    catch (error) {
        if (error instanceof Error) {
            throw new Error(`Failed to establish connection to ${host}: ${error.message}`);
        }
        else {
            throw new Error('Failed to establish connection due to an unknown error.');
        }
    }
};
exports.establishConnection = establishConnection;
//# sourceMappingURL=index.js.map