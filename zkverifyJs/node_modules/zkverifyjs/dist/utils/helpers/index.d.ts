import 'dotenv/config';
import { ApiPromise } from '@polkadot/api';
import { EventEmitter } from 'events';
import { AttestationEvent, ProofProcessor } from '../../types';
import { ProofType } from '../../config';
/**
 * Waits for a specific `NewAttestation` event and returns the associated data.
 *
 * @param {ApiPromise} api - The Polkadot.js API instance.
 * @param {number | undefined} attestationId - The attestation ID to wait for.
 * @param {EventEmitter} emitter - The EventEmitter instance for emitting events.
 *
 * @returns {Promise<AttestationEvent>} Resolves with the attestation event data if confirmed, or rejects with an error.
 *
 * @throws {Error} If the attestation ID is undefined or an error occurs during event subscription.
 *
 * @emits ZkVerifyEvents.AttestationConfirmed - When the specified attestation is confirmed.
 * @emits ZkVerifyEvents.AttestationMissed - If a later attestation ID is received.
 * @emits ZkVerifyEvents.BeforeExpected - If the attestation ID from the event is less than expected.
 * @emits ZkVerifyEvents.ErrorEvent - If an error occurs.
 */
export declare function waitForNewAttestationEvent(api: ApiPromise, attestationId: number | undefined, emitter: EventEmitter): Promise<AttestationEvent>;
/**
 * Waits for the zkVerify node to sync.
 * @param api - The ApiPromise instance.
 * @returns A promise that resolves when the node is synced.
 */
export declare function waitForNodeToSync(api: ApiPromise): Promise<void>;
export declare function getProofProcessor(proofType: ProofType): ProofProcessor;
export declare function getProofPallet(proofType: ProofType): string;
export declare function checkReadOnly(readOnly: boolean): void;
//# sourceMappingURL=index.d.ts.map